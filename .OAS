openapi: 3.0.3
info:
  title: Library Management Service API
  description: |-
    This is the API for the internal Library Management Service. It allows for user authentication, book management, and tracking of borrowed books.
    The API supports versioning via the `X-API-Version` header.
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Local Development Server

tags:
  - name: Authentication
    description: Operations for user authentication and token management.
  - name: Library
    description: Core operations for managing books and borrowings.

paths:
  /auth/token:
    post:
      tags:
        - Authentication
      summary: Get Access Token
      description: Authenticates a user with an email and password and returns a JWT access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user's email address.
                password:
                  type: string
                  description: The user's password.
              required:
                - username
                - password
      responses:
        '200':
          description: Successful authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Incorrect email or password.

  /api/books:
    post:
      tags:
        - Library
      summary: Register a New Book (Staff Only)
      description: Adds a new book to the library's collection. This operation requires staff privileges.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/APIVersionHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized (invalid or missing token).
        '403':
          description: Forbidden (user is not a staff member).

  /api/books/{book_id}/borrow:
    post:
      tags:
        - Library
      summary: Borrow a Book
      description: |-
        Allows an authenticated member to borrow an available copy of a book.
        If using the `latest` API version, this will also trigger an asynchronous email notification.
      security:
        - bearerAuth: []
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the book to borrow.
        - $ref: '#/components/parameters/APIVersionHeader'
      responses:
        '200':
          description: Book borrowed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '400':
          description: Bad Request (e.g., no available copies).
        '401':
          description: Unauthorized.
        '404':
          description: Book not found.

  /api/borrowings/{borrowing_id}/return:
    post:
      tags:
        - Library
      summary: Return a Book
      description: |-
        Allows an authenticated member to return a book they have borrowed.
        If using the `latest` API version, this will also trigger an asynchronous email notification.
      security:
        - bearerAuth: []
      parameters:
        - name: borrowing_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the borrowing record.
        - $ref: '#/components/parameters/APIVersionHeader'
      responses:
        '200':
          description: Book returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '400':
          description: Bad Request (e.g., book already returned).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (user did not borrow this book).
        '404':
          description: Borrowing record not found.

  /api/members/me/books:
    get:
      tags:
        - Library
      summary: View My Borrowed Books
      description: Retrieves a list of all books currently borrowed by the authenticated member.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/APIVersionHeader'
      responses:
        '200':
          description: A list of borrowed books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borrowing'
        '401':
          description: Unauthorized.

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        available_copies:
          type: integer
    BookCreate:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        total_copies:
          type: integer
          default: 1
      required:
        - title
        - author
    Borrowing:
      type: object
      properties:
        id:
          type: integer
        borrow_date:
          type: string
          format: date-time
        due_date:
          type: string
          format: date-time
        book:
          $ref: '#/components/schemas/Book'
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer

  parameters:
    APIVersionHeader:
      name: X-API-Version
      in: header
      required: false
      schema:
        type: string
        enum: [v1, latest]
        default: v1
      description: The version of the API to use. Defaults to `v1` if not provided.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication.
